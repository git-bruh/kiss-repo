From 4f224c5f202cbdc25ca3dd1cb4ebf664cac3ac05 Mon Sep 17 00:00:00 2001
From: git-bruh <e817509a-8ee9-4332-b0ad-3a6bdf9ab63f@aleeas.com>
Date: Fri, 17 Sep 2021 19:48:54 +0530
Subject: [PATCH] make dbus support optional

---
 meson.build                                   |  6 +++-
 meson_options.txt                             |  4 +++
 spa/plugins/support/meson.build               | 17 +++++-----
 src/examples/media-session/access-portal.c    | 20 +++++++++++
 src/examples/media-session/alsa-monitor.c     | 33 ++++++++++++++++++-
 src/examples/media-session/media-session.c    |  2 ++
 src/examples/media-session/pw-reserve.c       | 20 +++++++++++
 src/modules/meson.build                       |  5 ++-
 src/modules/module-protocol-pulse/internal.h  |  2 ++
 .../module-protocol-pulse/pulse-server.c      |  4 +++
 test/meson.build                              | 24 +++++++++-----
 11 files changed, 117 insertions(+), 20 deletions(-)

diff --git a/meson.build b/meson.build
index c9b98c8..a8b2661 100644
--- a/meson.build
+++ b/meson.build
@@ -320,7 +320,11 @@ mathlib = cc.find_library('m', required : false)
 rt_lib = cc.find_library('rt', required : false) # clock_gettime
 dl_lib = cc.find_library('dl', required : false)
 pthread_lib = dependency('threads')
-dbus_dep = dependency('dbus-1')
+dbus_dep = dependency('dbus-1', required : get_option('dbus'))
+summary({'dbus': dbus_dep.found()}, bool_yn: true)
+if dbus_dep.found() and dbus_dep.found()
+  cdata.set('HAVE_DBUS', 1)
+endif
 sdl_dep = dependency('sdl2', required : get_option('sdl2'))
 summary({'SDL 2': sdl_dep.found()}, bool_yn: true, section: 'Misc dependencies')
 ncurses_dep = dependency('ncursesw', required : false)
diff --git a/meson_options.txt b/meson_options.txt
index 3d4d653..a1894cf 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -30,6 +30,10 @@ option('gstreamer-device-provider',
        description: 'Build GStreamer device provider plugin',
        type: 'feature',
        value: 'auto')
+option('dbus',
+       description: 'Enable dbus support',
+       type: 'feature',
+       value: 'auto')
 option('systemd',
        description: 'Enable systemd integration',
        type: 'feature',
diff --git a/spa/plugins/support/meson.build b/spa/plugins/support/meson.build
index d95c098..dc1a06f 100644
--- a/spa/plugins/support/meson.build
+++ b/spa/plugins/support/meson.build
@@ -30,15 +30,16 @@ if not get_option('evl').disabled()
 		        install_dir : spa_plugindir / 'support')
 endif
 
-spa_dbus_sources = ['dbus.c']
-
-spa_dbus_lib = shared_library('spa-dbus',
-			spa_dbus_sources,
-			include_directories : [ spa_inc],
-			dependencies : [dbus_dep, ],
-			install : true,
-		        install_dir : spa_plugindir / 'support')
+if dbus_dep.found()
+  spa_dbus_sources = ['dbus.c']
 
+  spa_dbus_lib = shared_library('spa-dbus',
+			  spa_dbus_sources,
+			  include_directories : [ spa_inc],
+			  dependencies : [dbus_dep, ],
+			  install : true,
+		          install_dir : spa_plugindir / 'support')
+endif
 
 if systemd_dep.found()
   spa_journal_sources = ['journal.c']
diff --git a/src/examples/media-session/access-portal.c b/src/examples/media-session/access-portal.c
index 1b6bb7b..59bfb53 100644
--- a/src/examples/media-session/access-portal.c
+++ b/src/examples/media-session/access-portal.c
@@ -30,10 +30,14 @@
 
 #include "config.h"
 
+#ifdef HAVE_DBUS
 #include <dbus/dbus.h>
+#endif
 
 #include <spa/utils/string.h>
+#ifdef HAVE_DBUS
 #include <spa/support/dbus.h>
+#endif
 #include <spa/debug/dict.h>
 
 #include "pipewire/pipewire.h"
@@ -92,7 +96,9 @@ struct impl {
 
 	struct spa_list client_list;
 
+#ifdef HAVE_DBUS
 	DBusConnection *bus;
+#endif
 };
 
 struct client {
@@ -112,7 +118,9 @@ struct client {
 	enum media_role allowed_media_roles;
 };
 
+#ifdef HAVE_DBUS
 static DBusConnection *get_dbus_connection(struct impl *impl);
+#endif
 
 static void client_info_changed(struct client *client, const struct pw_client_info *info);
 
@@ -325,9 +333,11 @@ static void session_destroy(void *data)
 static void session_dbus_disconnected(void *data)
 {
 	struct impl *impl = data;
+#ifdef HAVE_DBUS
 	if (impl->bus)
 		dbus_connection_unref(impl->bus);
 	impl->bus = NULL;
+#endif
 }
 
 static const struct sm_media_session_events session_events = {
@@ -338,6 +348,7 @@ static const struct sm_media_session_events session_events = {
 	.dbus_disconnected = session_dbus_disconnected,
 };
 
+#ifdef HAVE_DBUS
 static bool
 check_permission_allowed(DBusMessageIter *iter)
 {
@@ -357,10 +368,12 @@ check_permission_allowed(DBusMessageIter *iter)
 
 	return allowed;
 }
+#endif
 
 static void do_permission_store_check(struct client *client)
 {
 	struct impl *impl = client->impl;
+#ifdef HAVE_DBUS
 	DBusMessage *m = NULL, *r = NULL;
 	DBusError error;
 	DBusMessageIter msg_iter;
@@ -369,6 +382,7 @@ static void do_permission_store_check(struct client *client)
 	DBusMessageIter r_iter;
 	DBusMessageIter permissions_iter;
 	DBusConnection *bus;
+#endif
 
 	if (client->app_id == NULL) {
 		pw_log_debug("Ignoring portal check for broken portal managed client %p",
@@ -394,6 +408,7 @@ static void do_permission_store_check(struct client *client)
 					client);
 		return;
 	}
+#ifdef HAVE_DBUS
 	bus = get_dbus_connection(impl);
 	if (bus == NULL) {
 		pw_log_debug("Ignoring portal check for client %p: no dbus",
@@ -463,6 +478,7 @@ static void do_permission_store_check(struct client *client)
 	}
 
 	dbus_message_unref(r);
+#endif
 
 	return;
 
@@ -521,6 +537,7 @@ static void client_info_changed(struct client *client, const struct pw_client_in
 	client->setup_complete = true;
 }
 
+#ifdef HAVE_DBUS
 static DBusHandlerResult permission_store_changed_handler(DBusConnection *connection,
 							  DBusMessage *message,
 							  void *user_data)
@@ -642,6 +659,7 @@ static DBusConnection *get_dbus_connection(struct impl *impl)
 				   impl, NULL);
 	return impl->bus;
 }
+#endif
 
 int sm_access_portal_start(struct sm_media_session *session)
 {
@@ -655,7 +673,9 @@ int sm_access_portal_start(struct sm_media_session *session)
 
 	impl->session = session;
 
+#ifdef HAVE_DBUS
 	get_dbus_connection(impl);
+#endif
 
 	sm_media_session_add_listener(impl->session,
 			&impl->listener,
diff --git a/src/examples/media-session/alsa-monitor.c b/src/examples/media-session/alsa-monitor.c
index d4b2016..56d6e85 100644
--- a/src/examples/media-session/alsa-monitor.c
+++ b/src/examples/media-session/alsa-monitor.c
@@ -48,7 +48,9 @@
 #include <spa/pod/parser.h>
 #include <spa/debug/dict.h>
 #include <spa/debug/pod.h>
+#ifdef HAVE_DBUS
 #include <spa/support/dbus.h>
+#endif
 
 #include <pipewire/pipewire.h>
 #include <pipewire/i18n.h>
@@ -56,7 +58,9 @@
 
 #include "media-session.h"
 
+#ifdef HAVE_DBUS
 #include "reserve.c"
+#endif
 
 /** \page page_media_session_module_alsa_monitor Media Session Module: ALSA Monitor
  *
@@ -148,7 +152,9 @@ struct device {
 
 	char *factory_name;
 
+#ifdef HAVE_DBUS
 	struct rd_device *reserve;
+#endif
 	struct spa_hook sync_listener;
 	int seq;
 	int priority;
@@ -256,8 +262,15 @@ static int node_release(void *data)
 
 	node->acquired = false;
 
-	if (device && --device->n_acquired == 0 && device->reserve)
+	if (device && --device->n_acquired == 0
+#ifdef HAVE_DBUS
+	&& device->reserve
+#endif
+	) {
+#ifdef HAVE_DBUS
 		rd_device_release(device->reserve);
+#endif
+	}
 	return 0;
 }
 
@@ -696,6 +709,7 @@ static void set_profile(struct device *device, int index)
 	}
 }
 
+#ifdef HAVE_DBUS
 static void set_jack_profile(struct impl *impl, int index)
 {
 	char buf[1024];
@@ -740,16 +754,20 @@ static void add_jack_timeout(struct impl *impl)
 	value.tv_nsec = 0;
 	pw_loop_update_timer(main_loop, impl->jack_timeout, &value, NULL, false);
 }
+#endif
 
 static void do_reserve_acquired(struct device *device)
 {
 	if (!device->probed)
 		probe_device(device);
 
+#ifdef HAVE_DBUS
 	if (device->n_acquired == 0 && device->reserve)
 		rd_device_release(device->reserve);
+#endif
 }
 
+#ifdef HAVE_DBUS
 static void reserve_acquired(void *data, struct rd_device *d)
 {
 	struct device *device = data;
@@ -850,16 +868,20 @@ static const struct rd_device_callbacks reserve_callbacks = {
 	.busy = reserve_busy,
 	.available = reserve_available,
 };
+#endif
 
 static int do_device_acquire(struct device *device)
 {
 	struct impl *impl = device->impl;
+#ifdef HAVE_DBUS
 	struct sm_media_session *session = impl->session;
 	int res;
+#endif
 
 	if (!impl->reserve)
 		goto done;
 
+#ifdef HAVE_DBUS
 	if (device->reserve == NULL) {
 		const char *reserve;
 		const char *path = pw_properties_get(device->props, SPA_KEY_API_ALSA_PATH);
@@ -896,13 +918,16 @@ static int do_device_acquire(struct device *device)
 		goto done;
 	}
 	return res;
+#endif
 
 done:
 	do_reserve_acquired(device);
+#ifdef HAVE_DBUS
 	if (device->reserve != NULL) {
 		rd_device_destroy(device->reserve);
 		device->reserve = NULL;
 	}
+#endif
 	return 0;
 }
 
@@ -921,8 +946,10 @@ static void device_destroy(void *data)
 		spa_hook_remove(&device->device_listener);
 	if (device->seq != 0)
 		spa_hook_remove(&device->sync_listener);
+#ifdef HAVE_DBUS
 	if (device->reserve)
 		rd_device_destroy(device->reserve);
+#endif
 }
 
 static void device_free(void *data)
@@ -1129,7 +1156,9 @@ static int alsa_start_jack_device(struct impl *impl)
 static void session_destroy(void *data)
 {
 	struct impl *impl = data;
+#ifdef HAVE_DBUS
 	remove_jack_timeout(impl);
+#endif
 	spa_hook_remove(&impl->session_listener);
 	spa_hook_remove(&impl->listener);
 	if (impl->jack_device)
@@ -1146,9 +1175,11 @@ static void session_dbus_disconnected(void *data)
 	struct impl *impl = data;
 
 	spa_list_for_each(d, &impl->device_list, link) {
+#ifdef HAVE_DBUS
 		if (d->reserve != NULL)
 			rd_device_destroy(d->reserve);
 		d->reserve = NULL;
+#endif
 	}
 }
 
diff --git a/src/examples/media-session/media-session.c b/src/examples/media-session/media-session.c
index 7b94e5b..c06e33f 100644
--- a/src/examples/media-session/media-session.c
+++ b/src/examples/media-session/media-session.c
@@ -58,7 +58,9 @@
 #include "pipewire/extensions/session-manager.h"
 #include "pipewire/extensions/client-node.h"
 
+#ifdef HAVE_DBUS
 #include <dbus/dbus.h>
+#endif
 
 #include "media-session.h"
 
diff --git a/src/examples/media-session/pw-reserve.c b/src/examples/media-session/pw-reserve.c
index 6597a6c..21e9871 100644
--- a/src/examples/media-session/pw-reserve.c
+++ b/src/examples/media-session/pw-reserve.c
@@ -27,13 +27,17 @@
 #include <getopt.h>
 #include <signal.h>
 
+#ifdef HAVE_DBUS
 #include <dbus/dbus.h>
 
 #include <spa/support/dbus.h>
+#endif
 
 #include "pipewire/pipewire.h"
 
+#ifdef HAVE_DBUS
 #include "reserve.c"
+#endif
 
 #define NAME "reserve"
 
@@ -42,13 +46,16 @@ struct impl {
 	struct pw_loop *loop;
 	struct pw_context *context;
 
+#ifdef HAVE_DBUS
 	struct spa_dbus *dbus;
 	struct spa_dbus_connection *dbus_connection;
 	DBusConnection *conn;
 
 	struct rd_device *device;
+#endif
 };
 
+#ifdef HAVE_DBUS
 static void reserve_acquired(void *data, struct rd_device *d)
 {
 	fprintf(stdout, "reserve acquired\n");
@@ -77,6 +84,7 @@ static const struct rd_device_callbacks reserve_callbacks = {
 	.busy = reserve_busy,
 	.available = reserve_available,
 };
+#endif
 
 static void do_quit(void *data, int signal_number)
 {
@@ -102,12 +110,16 @@ static void show_help(const char *name)
 int main(int argc, char *argv[])
 {
 	struct impl impl = { 0, };
+#ifdef HAVE_DBUS
 	const struct spa_support *support;
 	uint32_t n_support;
+#endif
 	const char *opt_name = NULL;
+#ifdef HAVE_DBUS
 	const char *opt_appname = DEFAULT_APPNAME;
 	bool opt_monitor = false;
 	int opt_priority= DEFAULT_PRIORITY;
+#endif
 
 	int res = 0, c;
 	static const struct option long_options[] = {
@@ -138,6 +150,7 @@ int main(int argc, char *argv[])
 		case 'n':
 			opt_name = optarg;
 			break;
+#ifdef HAVE_DBUS
 		case 'a':
 			opt_appname = optarg;
 			break;
@@ -147,6 +160,7 @@ int main(int argc, char *argv[])
 		case 'm':
 			opt_monitor = true;
 			break;
+#endif
 		default:
 			fprintf(stderr, "invalid option '%c'\n", c);
 			return -1;
@@ -175,6 +189,7 @@ int main(int argc, char *argv[])
 		goto exit;
 	}
 
+#ifdef HAVE_DBUS
 	support = pw_context_get_support(impl.context, &n_support);
 
 	impl.dbus = spa_support_find(support, n_support, SPA_TYPE_INTERFACE_DBus);
@@ -203,17 +218,22 @@ int main(int argc, char *argv[])
 
 	if (!opt_monitor)
 		rd_device_acquire(impl.device);
+#endif
 
 	pw_main_loop_run(impl.mainloop);
 
+#ifdef HAVE_DBUS
 	if (!opt_monitor)
 		rd_device_release(impl.device);
+#endif
 
 exit:
+#ifdef HAVE_DBUS
 	if (impl.conn)
 		dbus_connection_unref(impl.conn);
 	if (impl.dbus)
 		spa_dbus_connection_destroy(impl.dbus_connection);
+#endif
 	if (impl.context)
 		pw_context_destroy(impl.context);
 	if (impl.mainloop)
diff --git a/src/modules/meson.build b/src/modules/meson.build
index 77d05c5..6ae6ed5 100644
--- a/src/modules/meson.build
+++ b/src/modules/meson.build
@@ -200,7 +200,6 @@ pipewire_module_protocol_pulse_sources = [
   'module-protocol-pulse.c',
   'module-protocol-pulse/client.c',
   'module-protocol-pulse/collect.c',
-  'module-protocol-pulse/dbus-name.c',
   'module-protocol-pulse/extension.c',
   'module-protocol-pulse/format.c',
   'module-protocol-pulse/manager.c',
@@ -237,6 +236,10 @@ pipewire_module_protocol_pulse_sources = [
   'module-protocol-pulse/modules/module-zeroconf-discover.c',
 ]
 
+if dbus_dep.found()
+  pipewire_module_protocol_pulse_sources += 'module-protocol-pulse/dbus-name.c'
+endif
+
 if avahi_dep.found()
   pipewire_module_protocol_pulse_sources += [
     'module-protocol-pulse/modules/module-zeroconf-publish.c',
diff --git a/src/modules/module-protocol-pulse/internal.h b/src/modules/module-protocol-pulse/internal.h
index 9ece0ba..92fbb4a 100644
--- a/src/modules/module-protocol-pulse/internal.h
+++ b/src/modules/module-protocol-pulse/internal.h
@@ -67,7 +67,9 @@ struct impl {
 	struct spa_hook context_listener;
 
 	struct pw_properties *props;
+#ifdef HAVE_DBUS
 	void *dbus_name;
+#endif
 
 	struct ratelimit rate_limit;
 
diff --git a/src/modules/module-protocol-pulse/pulse-server.c b/src/modules/module-protocol-pulse/pulse-server.c
index 1feb4d5..8d4a7f6 100644
--- a/src/modules/module-protocol-pulse/pulse-server.c
+++ b/src/modules/module-protocol-pulse/pulse-server.c
@@ -4938,8 +4938,10 @@ static void impl_free(struct impl *impl)
 	struct client *c;
 	struct message *msg;
 
+#ifdef HAVE_DBUS
 	if (impl->dbus_name)
 		dbus_release_name(impl->dbus_name);
+#endif
 
 	spa_list_consume(msg, &impl->free_messages, link)
 		message_free(impl, msg, true, true);
@@ -5113,7 +5115,9 @@ struct pw_protocol_pulse *pw_protocol_pulse_new(struct pw_context *context,
 	pw_context_add_listener(context, &impl->context_listener,
 			&context_events, impl);
 
+#ifdef HAVE_DBUS
 	impl->dbus_name = dbus_request_name(context, "org.pulseaudio.Server");
+#endif
 
 	return (struct pw_protocol_pulse *) impl;
 
diff --git a/test/meson.build b/test/meson.build
index bbef49d..a28062a 100644
--- a/test/meson.build
+++ b/test/meson.build
@@ -67,20 +67,26 @@ test('test client',
                include_directories: pwtest_inc,
                link_with: pwtest_lib)
 )
+context_link_with = [
+	pwtest_lib,
+	spa_support_lib,
+	pipewire_module_protocol_native,
+	pipewire_module_client_node,
+	pipewire_module_client_device,
+	pipewire_module_adapter,
+	pipewire_module_metadata,
+	pipewire_module_session_manager
+]
+
+if dbus_dep.found()
+  context_link_with += spa_dbus_lib
+endif
 test('test context',
     executable('test-context',
                'test-context.c',
                'test-config.c',
                include_directories: pwtest_inc,
-               link_with: [pwtest_lib,
-                            spa_support_lib,
-                            spa_dbus_lib,
-                            pipewire_module_protocol_native,
-                            pipewire_module_client_node,
-                            pipewire_module_client_device,
-                            pipewire_module_adapter,
-                            pipewire_module_metadata,
-                            pipewire_module_session_manager])
+               link_with: context_link_with)
 )
 test('test support',
     executable('test-support',
-- 
2.33.0

